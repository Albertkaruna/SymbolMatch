using UnityEngine;
using System.Collections;
using UnityEditor.Callbacks;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
	public Transform[] Gens;
	public Transform[] X, Y;
	public GameObject Eff1, Eff2;
	private Vector2 fp, lp;
	private float dragDistance = Screen.height * 0.05f;
	private bool CanProceed, CanInvoke;
	private int[] arr;
	private MenuController MenuC;
	private float MovingTimeX, MovingTimeY;
	private bool IsSwiped;
	private int SymCount;

	// Use this for initialization
	void Start()
	{
		IsSwiped = false;
		MovingTimeX = 3f;
		MovingTimeY = 2.7f;
		CanInvoke = true;
		SymCount = 8;
		transform.position = Vector2.zero;
		MenuC = GameObject.Find("EventSystem").GetComponent<MenuController>();
//		Invoke("SymbolsGenerator", 2f);
	}
	
	// Update is called once per frame
	void Update()
	{
		if (Input.GetMouseButtonDown(0))
		{
			fp = Input.mousePosition;
		}
		if (Input.GetMouseButtonUp(0))
		{
			lp = Input.mousePosition;
			float xDistance = Mathf.Abs(lp.x - fp.x);
			float yDistance = Mathf.Abs(lp.y - fp.y);

			if (xDistance > dragDistance || yDistance > dragDistance)
			{
				IsSwiped = true;
				Invoke("SwipeEnd", 0.3f);
				if (xDistance > yDistance && CanInvoke)
				{
					if (lp.x > fp.x)
					{
						iTween.MoveTo(gameObject, iTween.Hash("x", 6f, "easetype", iTween.EaseType.linear, "time", 0.15f));
						iTween.MoveTo(gameObject, iTween.Hash("x", 0f, "easetype", iTween.EaseType.linear, "time", 0.01f, "delay", 0.15f));
					}
					else
					{
						iTween.MoveTo(gameObject, iTween.Hash("x", -6f, "easetype", iTween.EaseType.linear, "time", 0.15f));
						iTween.MoveTo(gameObject, iTween.Hash("x", 0f, "easetype", iTween.EaseType.linear, "time", 0.01f, "delay", 0.15f));
					}
				}
				else if (CanInvoke)
				{
					if (lp.y > fp.y)
					{
						iTween.MoveTo(gameObject, iTween.Hash("y", 3.5f, "easetype", iTween.EaseType.linear, "time", 0.15f));
						iTween.MoveTo(gameObject, iTween.Hash("y", 0f, "easetype", iTween.EaseType.linear, "time", 0.011f, "delay", 0.15f));
					}
					else
					{
						iTween.MoveTo(gameObject, iTween.Hash("y", -3.5f, "easetype", iTween.EaseType.linear, "time", 0.15f));
						iTween.MoveTo(gameObject, iTween.Hash("y", 0f, "easetype", iTween.EaseType.linear, "time", 0.01f, "delay", 0.15f));
					}
				}
			}
		}
	}


	void SwipeEnd()
	{
		IsSwiped = false;
	}

	public void SymbolsGenerator()
	{
		int Dir = 0;
		GenerateUniqueRandom(SymCount, 0, SymCount);

		int CentreSymbol = Random.Range(0, 4);
		GameObject SG = Instantiate(X[arr[CentreSymbol]].gameObject, transform.position, Quaternion.identity) as GameObject;
		SG.transform.parent = transform;
	
		if (Dir == 0)
		{
			GameObject G = Instantiate(Y[arr[Dir]].gameObject, Gens[Dir].position, Quaternion.identity) as GameObject;
			if (Dir == CentreSymbol)
			{
				G.tag = "Symbol";
			}
			iTween.MoveTo(G, iTween.Hash("x", 0, "time", MovingTimeX, "easetype", iTween.EaseType.linear));
			Dir++;
		}
		if (Dir == 1)
		{
			GameObject G = Instantiate(Y[arr[Dir]].gameObject, Gens[Dir].position, Quaternion.identity) as GameObject;
			if (Dir == CentreSymbol)
			{
				G.tag = "Symbol";
			}
			iTween.MoveTo(G, iTween.Hash("x", 0, "time", MovingTimeX, "easetype", iTween.EaseType.linear));
			Dir++;
		}
		if (Dir == 2)
		{
			GameObject G = Instantiate(Y[arr[Dir]].gameObject, Gens[Dir].position, Quaternion.identity) as GameObject;
			if (Dir == CentreSymbol)
			{
				G.tag = "Symbol";
			}
			iTween.MoveTo(G, iTween.Hash("y", 0, "time", MovingTimeY, "easetype", iTween.EaseType.linear));
			Dir++;
		}
		if (Dir == 3)
		{
			GameObject G = Instantiate(Y[arr[Dir]].gameObject, Gens[Dir].position, Quaternion.identity) as GameObject;
			if (Dir == CentreSymbol)
			{
				G.tag = "Symbol";
			}
			iTween.MoveTo(G, iTween.Hash("y", 0, "time", MovingTimeY, "easetype", iTween.EaseType.linear));
			Dir++;
		}
	}

	public int[] GenerateUniqueRandom(int amount, int min, int max)
	{
		arr = new int[amount];
		for (int i = 0; i < amount; i++)
		{
			bool done = false;
			while (!done)
			{
				int num = Random.Range(min, max);
				int j = 0;
				for (j = 0; j < i; j++)
				{
					if (num == arr[j])
					{
						break;    
					}
				}
				if (j == i)
				{
					arr[i] = num;
					done = true;
				}
			}
		}
		return arr;
	}

	void OnTriggerEnter2D(Collider2D col)
	{
		if (col.gameObject.tag == "Y" || col.gameObject.tag == "Symbol")
		{
			GameObject[] DG = GameObject.FindGameObjectsWithTag("Y");
			foreach (GameObject d in DG)
			{
				Destroy(d);
			}
			Destroy(GameObject.FindGameObjectWithTag("Symbol"));
			if (col.gameObject.tag == "Symbol")
			{
				if (IsSwiped)
				{
					MenuC.Score++;
					Destroy(Instantiate(Eff1, transform.position, Quaternion.identity)as GameObject, 2f);
				}
				MenuC.ScoreTxt.text = MenuC.Score.ToString();
			}
			else if (col.gameObject.tag == "Y")
			{
				Destroy(Instantiate(Eff2, transform.position, Quaternion.identity)as GameObject, 2f);
				CanInvoke = false;
			}
			if (transform.childCount > 0)
			{
				Destroy(transform.GetChild(0).gameObject);
			}
			if (CanInvoke)
				Invoke("SymbolsGenerator", 0.3f);
			else
				CancelInvoke("SymbolsGenerator");
		}
	}
}
